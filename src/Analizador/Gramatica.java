/* Generated By:JavaCC: Do not edit this line. Gramatica.java */
/** Analizador de expresiones aritmeticas sencillas. */
package Analizador;

import Abstract.AST;
import Expresiones.Aritmetica;
import Expresiones.Relacional;
import Expresiones.Logica;
import Expresiones.Primitivo;
import Expresiones.Identificador;
import Expresiones.Aritmetica.OperadorAritmetico;
import Expresiones.Logica.OperadorLogico;
import Expresiones.Relacional.OperadorRelacional;
import Instrucciones.Imprimir;
import Instrucciones.Declaracion;
import Instrucciones.Si;
import Instrucciones.Mientras;
import Instrucciones.Asignacion;
import TablaSimbolos.Arbol;
import TablaSimbolos.Tipo;
import TablaSimbolos.Tipo.Tipos;
import java.util.ArrayList;

public class Gramatica implements GramaticaConstants {

/** Fin Lexico */


/** ProducciÃ³n inicial 
    Analizar -> (Instruccion)+ EOF
*/
  final public Arbol Analizar() throws ParseException {
 ArrayList<AST> ins = new ArrayList<AST>(); AST e;
    label_1:
    while (true) {
      e = Instruccion();
                    ins.add(e);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENTERO:
      case CADENA:
      case IMPRIMIR:
      case MIENTRAS:
      case SI:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
                                          {if (true) return new Arbol(ins);}
    throw new Error("Missing return statement in function");
  }

/** Instruccion -> imprimir 
                 | declaracion
                 | asignacion
                 | si
                 | mientras
*/
  final public AST Instruccion() throws ParseException {
 AST e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPRIMIR:
      e = Imprimir();
                {if (true) return e;}
      break;
    case ENTERO:
    case CADENA:
      e = Declaracion();
                   {if (true) return e;}
      break;
    case IDENTIFICADOR:
      e = Asignacion();
                  {if (true) return e;}
      break;
    case SI:
      e = Si();
          {if (true) return e;}
      break;
    case MIENTRAS:
      e = Mientras();
                {if (true) return e;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/** Tipo -> numero
         |  cadena
*/
  final public Tipo Tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTERO:
      jj_consume_token(ENTERO);
              {if (true) return new Tipo(Tipos.NUMERO);}
      break;
    case CADENA:
      jj_consume_token(CADENA);
              {if (true) return new Tipo(Tipos.CADENA);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/** Imprimir -> imprimir ( Expresion ); */
  final public AST Imprimir() throws ParseException {
 AST e;
    jj_consume_token(IMPRIMIR);
    jj_consume_token(PARENI);
    e = Expresion();
    jj_consume_token(PAREND);
    jj_consume_token(PCOMA);
                                                        {if (true) return new Imprimir(e, token.beginLine, token.beginColumn);}
    throw new Error("Missing return statement in function");
  }

/** Declaracion -> tipo id = expresion; */
  final public AST Declaracion() throws ParseException {
 AST dec, e = null; Tipo t; Token id;
    t = Tipo();
    id = jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      e = Expresion();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(PCOMA);
                                                                {if (true) return new Declaracion(t, id.image, e, token.beginLine, token.beginColumn);}
    throw new Error("Missing return statement in function");
  }

/** Asignacion -> id = expresion; */
  final public AST Asignacion() throws ParseException {
 AST e; Token id;
    id = jj_consume_token(IDENTIFICADOR);
    jj_consume_token(IGUAL);
    e = Expresion();
    jj_consume_token(PCOMA);
                                                    {if (true) return new Asignacion(id.image, e, token.beginLine, token.beginColumn);}
    throw new Error("Missing return statement in function");
  }

/** Si -> if(condicion) instrucciones (else if(condicion) instrucciones)* (else instrucciones)? */
  final public AST Si() throws ParseException {
 AST e, If; ArrayList<AST> insIf, insElse = new ArrayList<AST>();
    jj_consume_token(SI);
    jj_consume_token(PARENI);
    e = Expresion();
    jj_consume_token(PAREND);
    insIf = Bloque();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SINO:
      if (jj_2_1(2)) {
        jj_consume_token(SINO);
        If = Si();
                                     insElse.add(If);
      } else if (jj_2_2(2)) {
        jj_consume_token(SINO);
        insElse = Bloque();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
     {if (true) return new Si(e, insIf, insElse, token.beginLine, token.beginColumn);}
    throw new Error("Missing return statement in function");
  }

/** While -> while(condicion) instrucciones */
  final public AST Mientras() throws ParseException {
 AST e; ArrayList<AST> ins;
    jj_consume_token(MIENTRAS);
    jj_consume_token(PARENI);
    e = Expresion();
    jj_consume_token(PAREND);
    ins = Bloque();
     {if (true) return new Mientras(e, ins, token.beginLine, token.beginColumn);}
    throw new Error("Missing return statement in function");
  }

/** Bloque -> { (Instruccion)+ }
*/
  final public ArrayList<AST> Bloque() throws ParseException {
 ArrayList<AST> insBloque = new ArrayList<AST>(); AST e;
    jj_consume_token(LLAVEI);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENTERO:
      case CADENA:
      case IMPRIMIR:
      case MIENTRAS:
      case SI:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      e = Instruccion();
                             insBloque.add(e);
    }
    jj_consume_token(LLAVED);
                                                            {if (true) return insBloque;}
    throw new Error("Missing return statement in function");
  }

  final public AST Expresion() throws ParseException {
 AST e, e1;
    e = CondicionAnd();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(OR);
      e1 = CondicionAnd();
                                e = new Logica(e, e1, OperadorLogico.OR, token.beginLine, token.beginColumn);
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public AST CondicionAnd() throws ParseException {
 AST e, e1;
    e = ExpresionIgualdad();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(AND);
      e1 = ExpresionIgualdad();
                                      e = new Logica(e, e1, OperadorLogico.AND, token.beginLine, token.beginColumn);
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/** ExpresionIgualdad -> ExpresionRelacional ('==' ExpresionRelacional)*
                     |  ExpresionRelacional ('!=' ExpresionRelacional)*
*/
  final public AST ExpresionIgualdad() throws ParseException {
 AST e, e1;
    e = ExpresionRelacional();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUALACION:
      case DIFERENCIACION:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUALACION:
        jj_consume_token(IGUALACION);
        e1 = ExpresionRelacional();
                                               e = new Relacional(e, e1, OperadorRelacional.IGUALACION, token.beginLine, token.beginColumn);
        break;
      case DIFERENCIACION:
        jj_consume_token(DIFERENCIACION);
        e1 = ExpresionRelacional();
                                                   e = new Relacional(e, e1, OperadorRelacional.DIFERENCIACION, token.beginLine, token.beginColumn);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/** ExpresionRelacional -> ExpresionAditiva ('>' ExpresionAditiva)*
                     |  ExpresionAditiva ('<' ExpresionAditiva)*
                     |  ExpresionAditiva ('>=' ExpresionAditiva)*
                     |  ExpresionAditiva ('<=' ExpresionAditiva)*
*/
  final public AST ExpresionRelacional() throws ParseException {
 AST e, e1;
    e = ExpresionAditiva();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MENORQUE:
      case MAYORQUE:
      case MENORIGUAL:
      case MAYORIGUAL:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAYORQUE:
        jj_consume_token(MAYORQUE);
        e1 = ExpresionAditiva();
                                          e = new Relacional(e, e1, OperadorRelacional.MAYORQUE, token.beginLine, token.beginColumn);
        break;
      case MENORQUE:
        jj_consume_token(MENORQUE);
        e1 = ExpresionAditiva();
                                          e = new Relacional(e, e1, OperadorRelacional.MENORQUE, token.beginLine, token.beginColumn);
        break;
      case MAYORIGUAL:
        jj_consume_token(MAYORIGUAL);
        e1 = ExpresionAditiva();
                                            e = new Relacional(e, e1, OperadorRelacional.MAYORIGUAL, token.beginLine, token.beginColumn);
        break;
      case MENORIGUAL:
        jj_consume_token(MENORIGUAL);
        e1 = ExpresionAditiva();
                                            e = new Relacional(e, e1, OperadorRelacional.MENORIGUAL, token.beginLine, token.beginColumn);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/** ExpresionAditiva -> ExpresionMultiplicativa ('+' ExpresionMultiplicativa)*
                     |  ExpresionMultiplicativa ('-' ExpresionMultiplicativa)*
*/
  final public AST ExpresionAditiva() throws ParseException {
 AST e, e1;
    e = ExpresionMultiplicativa();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
      case MENOS:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
        jj_consume_token(MAS);
        e1 = ExpresionMultiplicativa();
                                            e = new Aritmetica(e, e1, OperadorAritmetico.SUMA, token.beginLine, token.beginColumn);
        break;
      case MENOS:
        jj_consume_token(MENOS);
        e1 = ExpresionMultiplicativa();
                                              e = new Aritmetica(e, e1, OperadorAritmetico.RESTA, token.beginLine, token.beginColumn);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/** ExpresionMultiplicativa -> ExpresionUnaria ('*' ExpresionUnaria)*
                            |  ExpresionUnaria ('/' ExpresionUnaria)*
*/
  final public AST ExpresionMultiplicativa() throws ParseException {
 AST e, e1;
    e = ExpresionUnaria();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
      case DIV:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
        jj_consume_token(POR);
        e1 = ExpresionUnaria();
                                    e = new Aritmetica(e, e1, OperadorAritmetico.MULTIPLICACION, token.beginLine, token.beginColumn);
        break;
      case DIV:
        jj_consume_token(DIV);
        e1 = ExpresionUnaria();
                                    e = new Aritmetica(e, e1, OperadorAritmetico.DIVISION, token.beginLine, token.beginColumn);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/** ExpresionUnaria -> '-' ExpresionUnaria
                    |  Primitivo
 */
  final public AST ExpresionUnaria() throws ParseException {
 AST e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MENOS:
      jj_consume_token(MENOS);
      e = ExpresionUnaria();
                                 {if (true) return new Aritmetica(e, OperadorAritmetico.MENOSUNARIO, token.beginLine, token.beginColumn);}
      break;
    case NOT:
      jj_consume_token(NOT);
      e = ExpresionUnaria();
                               {if (true) return new Logica(e, OperadorLogico.NOT, token.beginLine, token.beginColumn);}
      break;
    case NUMERO:
    case DECIMAL:
    case PARENI:
    case IDENTIFICADOR:
    case STRING:
      e = Primitivo();
                   {if (true) return e;}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/** Primitivo -> Numero
              |  Decimal
              |  '(' Expresion ')' 
*/
  final public AST Primitivo() throws ParseException {
 AST e; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO:
      jj_consume_token(NUMERO);
              {if (true) return new Primitivo(new Tipo(Tipos.NUMERO), Double.parseDouble(token.image), token.beginLine, token.beginColumn);}
      break;
    case DECIMAL:
      jj_consume_token(DECIMAL);
               {if (true) return new Primitivo(new Tipo(Tipos.NUMERO), Double.parseDouble(token.image), token.beginLine, token.beginColumn);}
      break;
    case STRING:
      t = jj_consume_token(STRING);
                {if (true) return new Primitivo(new Tipo(Tipos.CADENA), t.image.substring(1,t.image.length()-1), token.beginLine, token.beginColumn);}
      break;
    case IDENTIFICADOR:
      t = jj_consume_token(IDENTIFICADOR);
                       {if (true) return new Identificador(t.image, token.beginLine, token.beginColumn);}
      break;
    case PARENI:
      jj_consume_token(PARENI);
      e = Expresion();
      jj_consume_token(PAREND);
                                     {if (true) return e;}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(LLAVEI)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(SI)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(SINO)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(SINO)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public GramaticaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3e00,0x3e00,0x600,0x4000000,0x4000,0x3e00,0x0,0x0,0x80000000,0x80000000,0x78000000,0x78000000,0xc00000,0xc00000,0x3000000,0x3000000,0x810180,0x10180,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x10,0x10,0x0,0x0,0x0,0x10,0x4,0x2,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x98,0x90,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Gramatica(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Gramatica(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Gramatica(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Gramatica(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[40];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
