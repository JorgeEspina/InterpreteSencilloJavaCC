/* Generated By:JavaCC: Do not edit this line. GramaticaConstants.java */
/** Analizador de expresiones aritmeticas sencillas. */
package Analizador;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GramaticaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int NUMERO = 7;
  /** RegularExpression Id. */
  int DECIMAL = 8;
  /** RegularExpression Id. */
  int ENTERO = 9;
  /** RegularExpression Id. */
  int CADENA = 10;
  /** RegularExpression Id. */
  int IMPRIMIR = 11;
  /** RegularExpression Id. */
  int MIENTRAS = 12;
  /** RegularExpression Id. */
  int FUNCION = 13;
  /** RegularExpression Id. */
  int RETORNO = 14;
  /** RegularExpression Id. */
  int BREAK = 15;
  /** RegularExpression Id. */
  int CONTINUE = 16;
  /** RegularExpression Id. */
  int SI = 17;
  /** RegularExpression Id. */
  int SINO = 18;
  /** RegularExpression Id. */
  int PCOMA = 19;
  /** RegularExpression Id. */
  int PARENI = 20;
  /** RegularExpression Id. */
  int PAREND = 21;
  /** RegularExpression Id. */
  int CORI = 22;
  /** RegularExpression Id. */
  int CORD = 23;
  /** RegularExpression Id. */
  int LLAVEI = 24;
  /** RegularExpression Id. */
  int LLAVED = 25;
  /** RegularExpression Id. */
  int MAS = 26;
  /** RegularExpression Id. */
  int MENOS = 27;
  /** RegularExpression Id. */
  int POR = 28;
  /** RegularExpression Id. */
  int DIV = 29;
  /** RegularExpression Id. */
  int IGUAL = 30;
  /** RegularExpression Id. */
  int MENORQUE = 31;
  /** RegularExpression Id. */
  int MAYORQUE = 32;
  /** RegularExpression Id. */
  int MENORIGUAL = 33;
  /** RegularExpression Id. */
  int MAYORIGUAL = 34;
  /** RegularExpression Id. */
  int IGUALACION = 35;
  /** RegularExpression Id. */
  int DIFERENCIACION = 36;
  /** RegularExpression Id. */
  int COMA = 37;
  /** RegularExpression Id. */
  int AND = 38;
  /** RegularExpression Id. */
  int OR = 39;
  /** RegularExpression Id. */
  int NOT = 40;
  /** RegularExpression Id. */
  int IDENTIFICADOR = 41;
  /** RegularExpression Id. */
  int STRING = 44;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int STRING_STATE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<NUMERO>",
    "<DECIMAL>",
    "\"Numero\"",
    "\"Cadena\"",
    "\"Imprimir\"",
    "\"Mientras\"",
    "\"Funcion\"",
    "\"Return\"",
    "\"Break\"",
    "\"continue\"",
    "\"if\"",
    "\"else\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\",\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "<IDENTIFICADOR>",
    "\"\\\"\"",
    "<token of kind 43>",
    "\"\\\"\"",
  };

}
